// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialize.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "serialize.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mcserialize {

namespace {

const ::google::protobuf::Descriptor* LastNWords_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LastNWords_reflection_ = NULL;
const ::google::protobuf::Descriptor* WordFrequency_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WordFrequency_reflection_ = NULL;
const ::google::protobuf::Descriptor* WordFrequency_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WordFrequency_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* NOrderChain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NOrderChain_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_serialize_2eproto() {
  protobuf_AddDesc_serialize_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "serialize.proto");
  GOOGLE_CHECK(file != NULL);
  LastNWords_descriptor_ = file->message_type(0);
  static const int LastNWords_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastNWords, word_),
  };
  LastNWords_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LastNWords_descriptor_,
      LastNWords::default_instance_,
      LastNWords_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastNWords, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastNWords, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LastNWords));
  WordFrequency_descriptor_ = file->message_type(1);
  static const int WordFrequency_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordFrequency, entry_),
  };
  WordFrequency_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WordFrequency_descriptor_,
      WordFrequency::default_instance_,
      WordFrequency_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordFrequency, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordFrequency, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WordFrequency));
  WordFrequency_Entry_descriptor_ = WordFrequency_descriptor_->nested_type(0);
  static const int WordFrequency_Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordFrequency_Entry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordFrequency_Entry, val_),
  };
  WordFrequency_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WordFrequency_Entry_descriptor_,
      WordFrequency_Entry::default_instance_,
      WordFrequency_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordFrequency_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordFrequency_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WordFrequency_Entry));
  Entry_descriptor_ = file->message_type(2);
  static const int Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, lastnwords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, word_frequency_),
  };
  Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Entry_descriptor_,
      Entry::default_instance_,
      Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Entry));
  NOrderChain_descriptor_ = file->message_type(3);
  static const int NOrderChain_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NOrderChain, entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NOrderChain, order_),
  };
  NOrderChain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NOrderChain_descriptor_,
      NOrderChain::default_instance_,
      NOrderChain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NOrderChain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NOrderChain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NOrderChain));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_serialize_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LastNWords_descriptor_, &LastNWords::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WordFrequency_descriptor_, &WordFrequency::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WordFrequency_Entry_descriptor_, &WordFrequency_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Entry_descriptor_, &Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NOrderChain_descriptor_, &NOrderChain::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_serialize_2eproto() {
  delete LastNWords::default_instance_;
  delete LastNWords_reflection_;
  delete WordFrequency::default_instance_;
  delete WordFrequency_reflection_;
  delete WordFrequency_Entry::default_instance_;
  delete WordFrequency_Entry_reflection_;
  delete Entry::default_instance_;
  delete Entry_reflection_;
  delete NOrderChain::default_instance_;
  delete NOrderChain_reflection_;
}

void protobuf_AddDesc_serialize_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017serialize.proto\022\013mcserialize\"\032\n\nLastNW"
    "ords\022\014\n\004word\030\001 \003(\t\"c\n\rWordFrequency\022/\n\005e"
    "ntry\030\001 \003(\0132 .mcserialize.WordFrequency.E"
    "ntry\032!\n\005Entry\022\013\n\003key\030\001 \002(\t\022\013\n\003val\030\002 \002(\003\""
    "h\n\005Entry\022+\n\nlastnwords\030\001 \002(\0132\027.mcseriali"
    "ze.LastNWords\0222\n\016word_frequency\030\002 \002(\0132\032."
    "mcserialize.WordFrequency\"\?\n\013NOrderChain"
    "\022!\n\005entry\030\001 \003(\0132\022.mcserialize.Entry\022\r\n\005o"
    "rder\030\002 \002(\005", 330);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "serialize.proto", &protobuf_RegisterTypes);
  LastNWords::default_instance_ = new LastNWords();
  WordFrequency::default_instance_ = new WordFrequency();
  WordFrequency_Entry::default_instance_ = new WordFrequency_Entry();
  Entry::default_instance_ = new Entry();
  NOrderChain::default_instance_ = new NOrderChain();
  LastNWords::default_instance_->InitAsDefaultInstance();
  WordFrequency::default_instance_->InitAsDefaultInstance();
  WordFrequency_Entry::default_instance_->InitAsDefaultInstance();
  Entry::default_instance_->InitAsDefaultInstance();
  NOrderChain::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_serialize_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_serialize_2eproto {
  StaticDescriptorInitializer_serialize_2eproto() {
    protobuf_AddDesc_serialize_2eproto();
  }
} static_descriptor_initializer_serialize_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LastNWords::kWordFieldNumber;
#endif  // !_MSC_VER

LastNWords::LastNWords()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mcserialize.LastNWords)
}

void LastNWords::InitAsDefaultInstance() {
}

LastNWords::LastNWords(const LastNWords& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mcserialize.LastNWords)
}

void LastNWords::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LastNWords::~LastNWords() {
  // @@protoc_insertion_point(destructor:mcserialize.LastNWords)
  SharedDtor();
}

void LastNWords::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LastNWords::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LastNWords::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LastNWords_descriptor_;
}

const LastNWords& LastNWords::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialize_2eproto();
  return *default_instance_;
}

LastNWords* LastNWords::default_instance_ = NULL;

LastNWords* LastNWords::New() const {
  return new LastNWords;
}

void LastNWords::Clear() {
  word_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LastNWords::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mcserialize.LastNWords)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string word = 1;
      case 1: {
        if (tag == 10) {
         parse_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->word(this->word_size() - 1).data(),
            this->word(this->word_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "word");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_word;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mcserialize.LastNWords)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mcserialize.LastNWords)
  return false;
#undef DO_
}

void LastNWords::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mcserialize.LastNWords)
  // repeated string word = 1;
  for (int i = 0; i < this->word_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->word(i).data(), this->word(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "word");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->word(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mcserialize.LastNWords)
}

::google::protobuf::uint8* LastNWords::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcserialize.LastNWords)
  // repeated string word = 1;
  for (int i = 0; i < this->word_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->word(i).data(), this->word(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "word");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->word(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcserialize.LastNWords)
  return target;
}

int LastNWords::ByteSize() const {
  int total_size = 0;

  // repeated string word = 1;
  total_size += 1 * this->word_size();
  for (int i = 0; i < this->word_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->word(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LastNWords::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LastNWords* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LastNWords*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LastNWords::MergeFrom(const LastNWords& from) {
  GOOGLE_CHECK_NE(&from, this);
  word_.MergeFrom(from.word_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LastNWords::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastNWords::CopyFrom(const LastNWords& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastNWords::IsInitialized() const {

  return true;
}

void LastNWords::Swap(LastNWords* other) {
  if (other != this) {
    word_.Swap(&other->word_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LastNWords::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LastNWords_descriptor_;
  metadata.reflection = LastNWords_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WordFrequency_Entry::kKeyFieldNumber;
const int WordFrequency_Entry::kValFieldNumber;
#endif  // !_MSC_VER

WordFrequency_Entry::WordFrequency_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mcserialize.WordFrequency.Entry)
}

void WordFrequency_Entry::InitAsDefaultInstance() {
}

WordFrequency_Entry::WordFrequency_Entry(const WordFrequency_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mcserialize.WordFrequency.Entry)
}

void WordFrequency_Entry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WordFrequency_Entry::~WordFrequency_Entry() {
  // @@protoc_insertion_point(destructor:mcserialize.WordFrequency.Entry)
  SharedDtor();
}

void WordFrequency_Entry::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void WordFrequency_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WordFrequency_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WordFrequency_Entry_descriptor_;
}

const WordFrequency_Entry& WordFrequency_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialize_2eproto();
  return *default_instance_;
}

WordFrequency_Entry* WordFrequency_Entry::default_instance_ = NULL;

WordFrequency_Entry* WordFrequency_Entry::New() const {
  return new WordFrequency_Entry;
}

void WordFrequency_Entry::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    val_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WordFrequency_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mcserialize.WordFrequency.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // required int64 val = 2;
      case 2: {
        if (tag == 16) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mcserialize.WordFrequency.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mcserialize.WordFrequency.Entry)
  return false;
#undef DO_
}

void WordFrequency_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mcserialize.WordFrequency.Entry)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required int64 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mcserialize.WordFrequency.Entry)
}

::google::protobuf::uint8* WordFrequency_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcserialize.WordFrequency.Entry)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required int64 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcserialize.WordFrequency.Entry)
  return target;
}

int WordFrequency_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required int64 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WordFrequency_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WordFrequency_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WordFrequency_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WordFrequency_Entry::MergeFrom(const WordFrequency_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WordFrequency_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WordFrequency_Entry::CopyFrom(const WordFrequency_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WordFrequency_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WordFrequency_Entry::Swap(WordFrequency_Entry* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WordFrequency_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WordFrequency_Entry_descriptor_;
  metadata.reflection = WordFrequency_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WordFrequency::kEntryFieldNumber;
#endif  // !_MSC_VER

WordFrequency::WordFrequency()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mcserialize.WordFrequency)
}

void WordFrequency::InitAsDefaultInstance() {
}

WordFrequency::WordFrequency(const WordFrequency& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mcserialize.WordFrequency)
}

void WordFrequency::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WordFrequency::~WordFrequency() {
  // @@protoc_insertion_point(destructor:mcserialize.WordFrequency)
  SharedDtor();
}

void WordFrequency::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WordFrequency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WordFrequency::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WordFrequency_descriptor_;
}

const WordFrequency& WordFrequency::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialize_2eproto();
  return *default_instance_;
}

WordFrequency* WordFrequency::default_instance_ = NULL;

WordFrequency* WordFrequency::New() const {
  return new WordFrequency;
}

void WordFrequency::Clear() {
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WordFrequency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mcserialize.WordFrequency)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mcserialize.WordFrequency.Entry entry = 1;
      case 1: {
        if (tag == 10) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mcserialize.WordFrequency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mcserialize.WordFrequency)
  return false;
#undef DO_
}

void WordFrequency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mcserialize.WordFrequency)
  // repeated .mcserialize.WordFrequency.Entry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mcserialize.WordFrequency)
}

::google::protobuf::uint8* WordFrequency::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcserialize.WordFrequency)
  // repeated .mcserialize.WordFrequency.Entry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcserialize.WordFrequency)
  return target;
}

int WordFrequency::ByteSize() const {
  int total_size = 0;

  // repeated .mcserialize.WordFrequency.Entry entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WordFrequency::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WordFrequency* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WordFrequency*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WordFrequency::MergeFrom(const WordFrequency& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WordFrequency::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WordFrequency::CopyFrom(const WordFrequency& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WordFrequency::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->entry())) return false;
  return true;
}

void WordFrequency::Swap(WordFrequency* other) {
  if (other != this) {
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WordFrequency::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WordFrequency_descriptor_;
  metadata.reflection = WordFrequency_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Entry::kLastnwordsFieldNumber;
const int Entry::kWordFrequencyFieldNumber;
#endif  // !_MSC_VER

Entry::Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mcserialize.Entry)
}

void Entry::InitAsDefaultInstance() {
  lastnwords_ = const_cast< ::mcserialize::LastNWords*>(&::mcserialize::LastNWords::default_instance());
  word_frequency_ = const_cast< ::mcserialize::WordFrequency*>(&::mcserialize::WordFrequency::default_instance());
}

Entry::Entry(const Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mcserialize.Entry)
}

void Entry::SharedCtor() {
  _cached_size_ = 0;
  lastnwords_ = NULL;
  word_frequency_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:mcserialize.Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
  if (this != default_instance_) {
    delete lastnwords_;
    delete word_frequency_;
  }
}

void Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entry_descriptor_;
}

const Entry& Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialize_2eproto();
  return *default_instance_;
}

Entry* Entry::default_instance_ = NULL;

Entry* Entry::New() const {
  return new Entry;
}

void Entry::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_lastnwords()) {
      if (lastnwords_ != NULL) lastnwords_->::mcserialize::LastNWords::Clear();
    }
    if (has_word_frequency()) {
      if (word_frequency_ != NULL) word_frequency_->::mcserialize::WordFrequency::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mcserialize.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mcserialize.LastNWords lastnwords = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lastnwords()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_word_frequency;
        break;
      }

      // required .mcserialize.WordFrequency word_frequency = 2;
      case 2: {
        if (tag == 18) {
         parse_word_frequency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_word_frequency()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mcserialize.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mcserialize.Entry)
  return false;
#undef DO_
}

void Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mcserialize.Entry)
  // required .mcserialize.LastNWords lastnwords = 1;
  if (has_lastnwords()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lastnwords(), output);
  }

  // required .mcserialize.WordFrequency word_frequency = 2;
  if (has_word_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->word_frequency(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mcserialize.Entry)
}

::google::protobuf::uint8* Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcserialize.Entry)
  // required .mcserialize.LastNWords lastnwords = 1;
  if (has_lastnwords()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lastnwords(), target);
  }

  // required .mcserialize.WordFrequency word_frequency = 2;
  if (has_word_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->word_frequency(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcserialize.Entry)
  return target;
}

int Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mcserialize.LastNWords lastnwords = 1;
    if (has_lastnwords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lastnwords());
    }

    // required .mcserialize.WordFrequency word_frequency = 2;
    if (has_word_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->word_frequency());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lastnwords()) {
      mutable_lastnwords()->::mcserialize::LastNWords::MergeFrom(from.lastnwords());
    }
    if (from.has_word_frequency()) {
      mutable_word_frequency()->::mcserialize::WordFrequency::MergeFrom(from.word_frequency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_word_frequency()) {
    if (!this->word_frequency().IsInitialized()) return false;
  }
  return true;
}

void Entry::Swap(Entry* other) {
  if (other != this) {
    std::swap(lastnwords_, other->lastnwords_);
    std::swap(word_frequency_, other->word_frequency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entry_descriptor_;
  metadata.reflection = Entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NOrderChain::kEntryFieldNumber;
const int NOrderChain::kOrderFieldNumber;
#endif  // !_MSC_VER

NOrderChain::NOrderChain()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mcserialize.NOrderChain)
}

void NOrderChain::InitAsDefaultInstance() {
}

NOrderChain::NOrderChain(const NOrderChain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mcserialize.NOrderChain)
}

void NOrderChain::SharedCtor() {
  _cached_size_ = 0;
  order_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NOrderChain::~NOrderChain() {
  // @@protoc_insertion_point(destructor:mcserialize.NOrderChain)
  SharedDtor();
}

void NOrderChain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NOrderChain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NOrderChain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NOrderChain_descriptor_;
}

const NOrderChain& NOrderChain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialize_2eproto();
  return *default_instance_;
}

NOrderChain* NOrderChain::default_instance_ = NULL;

NOrderChain* NOrderChain::New() const {
  return new NOrderChain;
}

void NOrderChain::Clear() {
  order_ = 0;
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NOrderChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mcserialize.NOrderChain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mcserialize.Entry entry = 1;
      case 1: {
        if (tag == 10) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }

      // required int32 order = 2;
      case 2: {
        if (tag == 16) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mcserialize.NOrderChain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mcserialize.NOrderChain)
  return false;
#undef DO_
}

void NOrderChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mcserialize.NOrderChain)
  // repeated .mcserialize.Entry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(i), output);
  }

  // required int32 order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mcserialize.NOrderChain)
}

::google::protobuf::uint8* NOrderChain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcserialize.NOrderChain)
  // repeated .mcserialize.Entry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(i), target);
  }

  // required int32 order = 2;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcserialize.NOrderChain)
  return target;
}

int NOrderChain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

  }
  // repeated .mcserialize.Entry entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NOrderChain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NOrderChain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NOrderChain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NOrderChain::MergeFrom(const NOrderChain& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_order()) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NOrderChain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NOrderChain::CopyFrom(const NOrderChain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NOrderChain::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->entry())) return false;
  return true;
}

void NOrderChain::Swap(NOrderChain* other) {
  if (other != this) {
    entry_.Swap(&other->entry_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NOrderChain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NOrderChain_descriptor_;
  metadata.reflection = NOrderChain_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mcserialize

// @@protoc_insertion_point(global_scope)
